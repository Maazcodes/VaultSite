"""
Django settings for vault_site project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/

Environment Variables
=====================

* ``AIT_CONF`` -- path to YAML file containing configuration overrides, including:
    * ``MEDIA_ROOT`` -- path to directory in which files are stored
    * ``SHADIR_ROOT`` -- path to directory into which content-addressible deposit
      files are stored
    * ``FILE_UPLOAD_TEMP_DIR`` -- path to directory into which deposited flow
      chunks are saved
    * ``SECRET_KEY`` -- Django SECRET_KEY
    * ``DEBUG`` -- ``true`` when Django should operate in debug mode
    * ``SENTRY_DSN`` -- Sentry DSN to which to report exceptions
    * ``VAULT_POSTGRES_NAME`` -- name of postgres database used by application
    * ``VAULT_POSTGRES_USER`` -- name of postgres user
    * ``VAULT_POSTGRES_PASSWORD`` -- password of postgres user
    * ``VAULT_POSTGRES_HOST`` -- hostname of postgres daemon
    * ``VAULT_POSTGRES_PORT`` -- TCP port on which to connect to postgres daemon
    * ``STATIC_ROOT`` -- path to directory root of static assets
    * ``PETABOX_SECRET`` -- secret key shared with petabox used for signing
      content URLs for downloads
    * ``FIXITY_API_KEY`` -- preshared auth key accepted by the vault-site
      fixity API
    * ``FIXITTER_API_KEY`` -- preshared auth key accepted by the fixity
      checking service
"""

import os
from pathlib import Path

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
import yaml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

with open(os.environ.get("AIT_CONF", "/etc/vault.yml"), encoding="utf-8") as f:
    conf = yaml.safe_load(f)

MEDIA_ROOT = Path(conf.get("MEDIA_ROOT", "/opt/DPS/files/"))
SHADIR_ROOT = Path(conf.get("SHADIR_ROOT", "/opt/DPS/SHA_DIR/"))
FILE_UPLOAD_TEMP_DIR = Path(conf.get("FILE_UPLOAD_TEMP_DIR", "/opt/DPS/tmp/"))
PETABOX_SECRET = bytes(conf["PETABOX_SECRET"], "ascii")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

DEPLOYMENT_ENVIRONMENT = conf.get("DEPLOYMENT_ENVIRONMENT", "DEV")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = conf.get(
    "SECRET_KEY",
    "devsecretkeyljkadfadfsjkl9ew0f02iefj20h8310hknsnlasd172yo1lnimposimfn",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = conf.get("DEBUG", True)

IA_CONFIG_PATH = conf.get("IA_CONFIG_PATH")

ALLOWED_HOSTS = [
    "vault-site-local",
    "localhost",
    "127.0.0.1",
    "wbgrp-svc600.us.archive.org",
    "207.241.235.20",
    "207.241.225.89",
    "avdempsey-dev.us.archive.org",
    "adam-dev.us.archive.org",
    "wbgrp-svc018.us.archive.org",
    "wbgrp-vault-site-qa.us.archive.org",
]

# Allow registration of large Deposits in single request
# TODO: chunk deposit registration so we can cap POST size
DATA_UPLOAD_MAX_MEMORY_SIZE = None  # Defaults to 2.5MB

FILE_UPLOAD_HANDLERS = [
    # 'django.core.files.uploadhandler.MemoryFileUploadHandler',
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "rest_framework",
    "vault.apps.VaultConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": ("rest_framework.pagination.LimitOffsetPagination"),
    "EXCEPTION_HANDLER": "vault.rest_api.exception_handler",
    "PAGE_SIZE": 10,
}

ROOT_URLCONF = "vault_site.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "vault_site.jinja2env.environment",
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "vault.context_processors.sentry_dsn",
            ],
        },
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vault_site.wsgi.application"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": conf.get("VAULT_POSTGRES_NAME", "vault"),
        "USER": conf.get("VAULT_POSTGRES_USER", "vault"),
        "PASSWORD": conf.get("VAULT_POSTGRES_PASSWORD", "vault"),
        "HOST": conf.get("VAULT_POSTGRES_HOST", "127.0.0.1"),
        "PORT": conf.get("VAULT_POSTGRES_PORT", "5432"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/vault/static/"
STATICFILES_DIRS = [
    BASE_DIR / "vault/static/",
]

STATIC_ROOT = conf.get("STATIC_ROOT", "/opt/DPS/html/django-admin-static-hack")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "vault.User"

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard"


SENTRY_DSN = conf.get("SENTRY_DSN", "")


SAMPLED_PATHS = {"/api/flow_chunk", "/api/deposit_status"}


def traces_sampler(sampling_context):
    env = sampling_context.get("wsgi_environ", {})
    path = env.get("PATH_INFO")
    if path and path in SAMPLED_PATHS:
        return 0.001

    return 0.1


sentry_sdk.init(
    dsn=SENTRY_DSN,
    integrations=[DjangoIntegration()],
    traces_sampler=traces_sampler,
    send_default_pii=True,
    environment=DEPLOYMENT_ENVIRONMENT,
)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "plain": {
            "format": "{asctime} {levelname} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "plain",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "vault": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

SLACK_WEBHOOK = conf.get("VAULT_SLACK_WEBHOOK")

# configure email settings
EMAIL_HOST = conf.get("EMAIL_HOST", "mail.archive.org")
if DEPLOYMENT_ENVIRONMENT == "DEV":
    # in development, always send emails to the console rather than sending
    # actual emails.
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    CURRENT_HOST = conf.get("HOSTNAME", "localhost")
if DEPLOYMENT_ENVIRONMENT == "QA":
    CURRENT_HOST = conf.get("HOSTNAME", "wbgrp-vault-site-qa.us.archive.org")
if DEPLOYMENT_ENVIRONMENT == "PROD":
    CURRENT_HOST = conf.get("HOSTNAME", "wbgrp-svc600.us.archive.org")

if DEPLOYMENT_ENVIRONMENT != "DEV":
    # informs application it's mounted on /vault, which is necessary for URL generation
    FORCE_SCRIPT_NAME = "/vault"

# name of service as which to identify when creating presigned petabox content
# URLs
PETABOX_SERVICE_NAME = "dps-vault"

# time after issuance before presigned petabox URLs expire
PETABOX_URL_SIGNATURE_EXPIRATION_SECS = 30 * 60

# Preshared auth key accepted by the vault-site fixity API
FIXITY_API_KEY = conf.get("FIXITY_API_KEY", "FIXITY_API_KEY")
# Base URL for fixity-checking service
FIXITTER_URL_PREFIX = "https://webdata.archive-it.org/jobman"
# Preshared auth key accepted by the fixity checking service
FIXITTER_API_KEY = conf.get("FIXITTER_API_KEY", "FIXITTER_API_KEY")


# To disable basic auth support for DOAJ endpoint, or any view using the
# @basic_auth_required decorator, uncomment the following line
# BASICAUTH_DISABLE = True
